
	// media Queries
	@mixin mq($px, $query1: max, $query2: width) {
		@media screen and (#{$query1}-#{$query2}: $px) {
			@content;
		}
	}
	
	// px to rem for font-sizes and line-height
	@mixin font-size($sizeValue: 1.6, $line: $sizeValue * 1.5){
	  font-size: ($sizeValue * 1) + px;
	  line-height: ($line * 1) + px;
	  font-size: ($sizeValue / 12) + rem;
	  line-height: ($line / 12) + rem;
	}

	// accelerate all the hardware for smoothers css transtions and transforms
	@mixin hardwareAccelerate {
	  -webkit-transform: translate3d(0,0,0);
	  -webkit-perspective: 1000;
	  -webkit-backface-visibility: hidden;

	  -moz-transform: translate3d(0,0,0);
	  -moz-perspective: 1000;
	  -moz-backface-visibility: hidden;

	  -ms-transform: translate3d(0,0,0);
	  -ms-perspective: 1000;
	  -ms-backface-visibility: hidden;

	  transform: translate3d(0,0,0);
	  perspective: 1000;
	  backface-visibility: hidden;
	}
	
	// cross browser opacity
	@mixin opacity ($value)  {
	  $ms_opacity : $value * 100;
	    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(#{$ms_opacity})";
	    filter: alpha(opacity=#{$ms_opacity});
	    opacity: $value;
	}   



	//************************************************************************//
	// Example: @include prefixer(border-radius, $radii, webkit ms spec);
	//************************************************************************//

	$prefix-for-webkit:    true !default;
	$prefix-for-mozilla:   true !default;
	$prefix-for-microsoft: true !default;
	$prefix-for-opera:     true !default;
	$prefix-for-spec:      true !default; // required for keyframe mixin

	@mixin prefixer ($property, $value, $prefixes) {
	  @each $prefix in $prefixes {

	    @if $prefix == webkit and $prefix-for-webkit == true {
	      -webkit-#{$property}: $value;
	    }
	    @else if $prefix == moz and $prefix-for-mozilla == true {
	      -moz-#{$property}: $value;
	    }
	    @else if $prefix == ms and $prefix-for-microsoft == true {
	      -ms-#{$property}: $value;
	    }
	    @else if $prefix == o and $prefix-for-opera == true {
	      -o-#{$property}: $value;
	    }
	    @else if $prefix == spec and $prefix-for-spec == true {
	      #{$property}: $value;
	    }
	    @else  {
	      @warn "Unrecognized prefix: #{$prefix}";
	    }
	  }
	}

	@mixin transition ($properties...) {
	  @if length($properties) >= 1 {
	    @include prefixer(transition, $properties, webkit moz ms o spec);
	  }

	  @else {
	    $properties: all 0.15s ease-out 0;
	    @include prefixer(transition, $properties, webkit moz ms o spec);
	  }
	}

	@mixin box-sizing ($box) {
	//  content-box | border-box | inherit
	  @include prefixer(box-sizing, $box, webkit moz spec);
	}


	@mixin transform($property: none) {
	//  none | <transform-function>
	  @include prefixer(transform, $property, webkit moz ms o spec);
	}

	@mixin transform-origin($axes: 50%) {
	// x-axis - left | center | right  | length | %
	// y-axis - top  | center | bottom | length | %
	// z-axis -                          length
	  @include prefixer(transform-origin, $axes, webkit moz ms o spec);
	}

	//************************************************************************//
	// Generate a variable ($all-text-inputs) with a list of all html5
	// input types that have a text-based input, excluding textarea.
	// http://diveintohtml5.org/forms.html
	//************************************************************************//
	$inputs-list: 'input[type="email"]',
	              'input[type="number"]',
	              'input[type="password"]',
	              'input[type="search"]',
	              'input[type="tel"]',
	              'input[type="text"]',
	              'input[type="url"]',

	              // Webkit & Gecko may change the display of these in the future
	              'input[type="color"]',
	              'input[type="date"]',
	              'input[type="datetime"]',
	              'input[type="datetime-local"]',
	              'input[type="month"]',
	              'input[type="time"]',
	              'input[type="week"]';

	$unquoted-inputs-list: ();
	@each $input-type in $inputs-list {
	  $unquoted-inputs-list: append($unquoted-inputs-list, unquote($input-type), comma);
	}

	$all-text-inputs: $unquoted-inputs-list;


	// Hover Pseudo-class
	//************************************************************************//
	$all-text-inputs-hover: ();
	@each $input-type in $unquoted-inputs-list {
	      $input-type-hover: $input-type + ":hover";
	      $all-text-inputs-hover: append($all-text-inputs-hover, $input-type-hover, comma);
	}

	// Focus Pseudo-class
	//************************************************************************//
	$all-text-inputs-focus: ();
	@each $input-type in $unquoted-inputs-list {
	      $input-type-focus: $input-type + ":focus";
	      $all-text-inputs-focus: append($all-text-inputs-focus, $input-type-focus, comma);
	}

	// You must use interpolation on the variable:
	// #{$all-text-inputs}
	// #{$all-text-inputs-hover}
	// #{$all-text-inputs-focus}

	// Example
	//************************************************************************//
	//   #{$all-text-inputs}, textarea {
	//     border: 1px solid red;
	//   }


